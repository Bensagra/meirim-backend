generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"      // o “mysql” / “sqlite”
  url      = env("DATABASE_URL")
}

/// Estados posibles de una actividad
enum EstadoActividad {
  NO_HAY_NADIE                      // Estado1: No hay nadie para planificar
  HAY_GENTE_PERO_NO_NECESARIA       // Estado2: Tiene gente para planificar pero no la necesaria
  YA_HAY_GENTE_PERO_NO_SE_PLANIFICO // Estado3: Ya está la gente pero no se planificó
  FUE_PLANIFICADA                   // Estado4: Fue planificada
  FUE_DADA_LA_PLANIFICACION         // Estado5: Fue dada la planificación
}

/// Usuarios de la aplicación
model User {
  id           Int             @id @default(autoincrement())
  name       String
  surname     String
  dni          String          @unique
  email        String          @unique
  actividades  ActivityUser[]  // relaciones a actividades

  disponibilidadHorarios DisponibilidadHorarios[]
}

/// Temáticas publicadas anónimamente
model Tematica {
  id           Int                   @id @default(autoincrement())
  tematica     String
  usada        Boolean               @default(false)
  createdAt   DateTime              @default(now())
  actividades  ActivityTematica[]    // relaciones a actividades
}

/// Día de planificación con su estado y temáticas
model Activity {
  id             Int                   @id @default(autoincrement())
  fecha          DateTime              @unique     // Fecha de la actividad
  estado         EstadoActividad       @default(NO_HAY_NADIE)
  participants   ActivityUser[]        // usuarios que realizan la actividad
  tematicas      ActivityTematica[]    // temáticas asociadas a la actividad
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  notas          String?               // Notas opcionales sobre la actividad
  blocked       Boolean               @default(false)
}

/// Tabla de unión para asociar usuarios a una actividad
model ActivityUser {
  activity    Activity   @relation(fields: [activityId], references: [id])
  activityId  Int

  user        User       @relation(fields: [userId], references: [id])
  userId      Int

  @@id([activityId, userId])
}

/// Tabla de unión para asociar temáticas a una actividad
model ActivityTematica {
  activity     Activity   @relation(fields: [activityId], references: [id])
  activityId   Int

  tematica     Tematica   @relation(fields: [tematicaId], references: [id])
  tematicaId   Int

  @@id([activityId, tematicaId])
}



model DisponibilidadHorarios {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id])
  userId  Int
  dia     String
  horario String

  @@unique([userId, dia, horario])
}

model PenpalLead {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String
  idioma    String
  createdAt DateTime @default(now())

  @@unique([email, idioma])
}

model ShopNotify {
  id          Int      @id @default(autoincrement())
  email       String
  preferencia String
  createdAt   DateTime @default(now())

  @@index([email])
}